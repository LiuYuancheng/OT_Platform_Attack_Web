{"version":3,"sources":["angular-chart.min.js"],"names":["chart","type","restrict","scope","data","labels","options","series","colours","getColour","chartType","legend","click","link","elem","resetChart","newVal","oldVal","isEmpty","angular","equals","destroy","createChart","container","document","createElement","className","replaceWith","appendChild","window","G_vmlCanvasManager","initElement","$watch","length","Array","isArray","canUpdateChart","updateChart","$on","reduce","sum","carry","val","getRandomColour","getColours","cvs","ctx","getContext","getDataSets","getData","Chart","$emit","onclick","evt","getPointsAtEvent","getBarsAtEvent","getSegmentsAtEvent","activePoints","call","$apply","setLegend","copy","defaults","global","push","map","convertColour","colour","hexToRgb","substr","getRandomInt","fillColor","rgba","strokeColor","pointColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","min","max","Math","floor","random","alpha","concat","join","hex","bigint","parseInt","r","g","b","datasets","item","i","dataSet","label","value","color","highlight","$parent","parent","$oldLegend","find","generateLegend","append","values","forEach","dataset","points","bars","dataItem","j","segments","segment","update","Object","keys","responsive","multiTooltipTemplate","module","directive"],"mappings":"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","file":"angular-chart.min.js","sourcesContent":["(function () {\n  'use strict';\n\n  Chart.defaults.global.responsive = true;\n  Chart.defaults.global.multiTooltipTemplate = '<%if (datasetLabel){%><%=datasetLabel%>: <%}%><%= value %>';\n\n  Chart.defaults.global.colours = [\n    '#97BBCD', // blue\n    '#DCDCDC', // light grey\n    '#F7464A', // red\n    '#46BFBD', // green\n    '#FDB45C', // yellow\n    '#949FB1', // grey\n    '#4D5360'  // dark grey\n  ];\n\n  angular.module('chart.js', [])\n    .directive('chartBase', function () { return chart(); })\n    .directive('chartLine', function () { return chart('Line'); })\n    .directive('chartBar', function () { return chart('Bar'); })\n    .directive('chartRadar', function () { return chart('Radar'); })\n    .directive('chartDoughnut', function () { return chart('Doughnut'); })\n    .directive('chartPie', function () { return chart('Pie'); })\n    .directive('chartPolarArea', function () { return chart('PolarArea'); });\n\n  function chart (type) {\n    return {\n      restrict: 'CA',\n      scope: {\n        data: '=',\n        labels: '=',\n        options: '=',\n        series: '=',\n        colours: '=?',\n        getColour: '=?',\n        chartType: '=',\n        legend: '@',\n        click: '='\n      },\n      link: function (scope, elem/*, attrs */) {\n        var chart, container = document.createElement('div');\n        container.className = 'chart-container';\n        elem.replaceWith(container);\n        container.appendChild(elem[0]);\n\n        if (typeof window.G_vmlCanvasManager === 'object' && window.G_vmlCanvasManager !== null) {\n          if (typeof window.G_vmlCanvasManager.initElement === 'function') {\n            window.G_vmlCanvasManager.initElement(elem[0]);\n          }\n        }\n\n        // Order of setting \"watch\" matter\n\n        scope.$watch('data', function (newVal, oldVal) {\n          if (! newVal || ! newVal.length || (Array.isArray(newVal[0]) && ! newVal[0].length)) return;\n          var chartType = type || scope.chartType;\n          if (! chartType) return;\n\n          if (chart) {\n            if (canUpdateChart(newVal, oldVal)) return updateChart(chart, newVal, scope);\n            chart.destroy();\n          }\n\n          chart = createChart(chartType, scope, elem);\n        }, true);\n\n        scope.$watch('series', resetChart, true);\n        scope.$watch('labels', resetChart, true);\n        scope.$watch('options', resetChart, true);\n        scope.$watch('colours', resetChart, true);\n\n        scope.$watch('chartType', function (newVal, oldVal) {\n          if (isEmpty(newVal)) return;\n          if (angular.equals(newVal, oldVal)) return;\n          if (chart) chart.destroy();\n          chart = createChart(newVal, scope, elem);\n        });\n\n        scope.$on('$destroy', function () {\n          if (chart) chart.destroy();\n        });\n\n        function resetChart (newVal, oldVal) {\n          if (isEmpty(newVal)) return;\n          if (angular.equals(newVal, oldVal)) return;\n          var chartType = type || scope.chartType;\n          if (! chartType) return;\n\n          // chart.update() doesn't work for series and labels\n          // so we have to re-create the chart entirely\n          if (chart) chart.destroy();\n\n          chart = createChart(chartType, scope, elem);\n        }\n      }\n    };\n  }\n\n  function canUpdateChart(newVal, oldVal) {\n    if (newVal && oldVal && newVal.length && oldVal.length) {\n      return Array.isArray(newVal[0]) ?\n      newVal.length === oldVal.length && newVal[0].length === oldVal[0].length :\n        oldVal.reduce(sum, 0) > 0 ? newVal.length === oldVal.length : false;\n    }\n    return false;\n  }\n\n  function sum (carry, val) {\n    return carry + val;\n  }\n\n  function createChart (type, scope, elem) {\n    if (! scope.data || ! scope.data.length) return;\n    scope.getColour = typeof scope.getColour === 'function' ? scope.getColour : getRandomColour;\n    scope.colours = getColours(scope);\n    var cvs = elem[0], ctx = cvs.getContext('2d');\n    var data = Array.isArray(scope.data[0]) ?\n      getDataSets(scope.labels, scope.data, scope.series || [], scope.colours) :\n      getData(scope.labels, scope.data, scope.colours);\n    var chart = new Chart(ctx)[type](data, scope.options || {});\n    scope.$emit('create', chart);\n\n    if (scope.click) {\n      cvs.onclick = function (evt) {\n        var click = chart.getPointsAtEvent || chart.getBarsAtEvent || chart.getSegmentsAtEvent;\n\n        if (click) {\n          var activePoints = click.call(chart, evt);\n          scope.click(activePoints, evt);\n          scope.$apply();\n        }\n      };\n    }\n    if (scope.legend && scope.legend !== 'false') setLegend(elem, chart);\n    return chart;\n  }\n\n  function getColours (scope) {\n    var colours = angular.copy(scope.colours) || angular.copy(Chart.defaults.global.colours);\n    while (colours.length < scope.data.length) {\n      colours.push(scope.getColour());\n    }\n    return colours.map(convertColour);\n  }\n\n  function convertColour (colour) {\n    if (typeof colour === 'object' && colour !== null) return colour;\n    if (typeof colour === 'string' && colour[0] === '#') return getColour(hexToRgb(colour.substr(1)));\n    return getRandomColour();\n  }\n\n  function getRandomColour () {\n    var colour = [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n    return getColour(colour);\n  }\n\n  function getColour (colour) {\n    return {\n      fillColor: rgba(colour, 0.2),\n      strokeColor: rgba(colour, 1),\n      pointColor: rgba(colour, 1),\n      pointStrokeColor: '#fff',\n      pointHighlightFill: '#fff',\n      pointHighlightStroke: rgba(colour, 0.8)\n    };\n  }\n\n  function getRandomInt (min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n  }\n\n  // Credit: http://stackoverflow.com/a/11508164/1190235\n  function hexToRgb (hex) {\n    var bigint = parseInt(hex, 16),\n      r = (bigint >> 16) & 255,\n      g = (bigint >> 8) & 255,\n      b = bigint & 255;\n\n    return [r, g, b];\n  }\n\n  function getDataSets (labels, data, series, colours) {\n    return {\n      labels: labels,\n      datasets: data.map(function (item, i) {\n        var dataSet = angular.copy(colours[i]);\n        dataSet.label = series[i];\n        dataSet.data = item;\n        return dataSet;\n      })\n    };\n  }\n\n  function getData (labels, data, colours) {\n    return labels.map(function (label, i) {\n      return {\n        label: label,\n        value: data[i],\n        color: colours[i].strokeColor,\n        highlight: colours[i].pointHighlightStroke\n      };\n    });\n  }\n\n  function setLegend (elem, chart) {\n    var $parent = elem.parent(),\n        $oldLegend = $parent.find('chart-legend'),\n        legend = '<chart-legend>' + chart.generateLegend() + '</chart-legend>';\n    if ($oldLegend.length) $oldLegend.replaceWith(legend);\n    else $parent.append(legend);\n  }\n\n  function updateChart (chart, values, scope) {\n    if (Array.isArray(scope.data[0])) {\n      chart.datasets.forEach(function (dataset, i) {\n        (dataset.points || dataset.bars).forEach(function (dataItem, j) {\n          dataItem.value = values[i][j];\n        });\n      });\n    } else {\n      chart.segments.forEach(function (segment, i) {\n        segment.value = values[i];\n      });\n    }\n    chart.update();\n    scope.$emit('update', chart);\n  }\n\n  function isEmpty (value) {\n    return ! value ||\n      (Array.isArray(value) && ! value.length) ||\n      (typeof value === 'object' && ! Object.keys(value).length);\n  }\n\n})();\n"],"sourceRoot":"/source/"}